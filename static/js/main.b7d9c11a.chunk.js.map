{"version":3,"sources":["components/Table.js","data/data.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tableRows","inputValue","sort","indexSort","indexFilter","cellsCounter","rowsNumber","data","cells","length","columns","tds","i","row","j","td","value","style","objectSpread","push","setState","elem","index","classList","contains","text","_this2","rowsToRender","head","rows","a","b","filter","includes","_loop","sorting","react_default","createElement","key","cursor","marginRight","marginLeft","className","onClick","event","sortColumn","target","filtering","placeholder","onChange","updateInput","borderCollapse","Component","type","color","width","textAlign","padding","backgroundColor","borderLeft","borderRight","App","Table_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7d9c11a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Table extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tableRows: [],\r\n      inputValue: '',\r\n      sort: '',\r\n      indexSort: null,\r\n      indexFilter: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let cellsCounter = 0;\r\n    let rowsNumber = this.props.data.cells.length/this.props.data.columns.length;\r\n    let columns = this.props.data.columns;\r\n    let cells = this.props.data.cells;\r\n    let tds = [];\r\n\r\n    for (let i = 0; i < rowsNumber; i++) {\r\n      let row = [] \r\n      for (let j = 0; j < columns.length; j++) {\r\n        let td = {\r\n          value: cells[cellsCounter].value,\r\n          style: {\r\n            ...cells[cellsCounter].style,\r\n            ...columns[j].style,\r\n          }\r\n        };\r\n        row.push(td);\r\n        cellsCounter++;\r\n      }\r\n      tds.push(row);\r\n    }\r\n    this.setState({\r\n    tableRows: tds,\r\n    });\r\n  }\r\n\r\n  sortColumn(elem, index) {\r\n    if (elem.classList.contains('asc')) {\r\n      this.setState({\r\n        sort: 'asc',\r\n        indexSort: index,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        sort: 'desc',\r\n        indexSort: index,\r\n      });\r\n    }\r\n  }\r\n\r\n  updateInput(text, index) {\r\n    this.setState({\r\n      inputValue: text,\r\n      indexFilter: index,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let columns = this.props.data.columns;\r\n    let rowsToRender = this.state.tableRows;\r\n    let head = [];\r\n    let rows = [];\r\n\r\n    if (this.state.sort === 'asc') {\r\n      this.state.tableRows.sort((a, b) => {\r\n        return a[this.state.indexSort].value - b[this.state.indexSort].value});\r\n    } else if (this.state.sort === 'desc') {\r\n      this.state.tableRows.sort((a, b) => {\r\n        return b[this.state.indexSort].value - a[this.state.indexSort].value});\r\n    }\r\n\r\n    if (this.state.inputValue) {\r\n      rowsToRender = this.state.tableRows.filter(row => row[1].value.includes(this.state.inputValue));\r\n    }\r\n \r\n    for (let i = 0; i < columns.length; i++) {\r\n      let td;\r\n      if (columns[i].sorting) {\r\n        td = <td key={i}>Sort\r\n          <span \r\n            style={{cursor: 'pointer',\r\n            marginRight: '10px',\r\n            marginLeft: '10px'\r\n            }}\r\n            className = \"asc\" \r\n            onClick={(event) => this.sortColumn(event.target, i)\r\n          }>\r\n            &#8679;\r\n          </span>\r\n          <span \r\n            style={{cursor: 'pointer'}}\r\n            className = \"desc\" \r\n            onClick={(event) => this.sortColumn(event.target, i)\r\n          }>&#8681;\r\n          </span></td>;\r\n        head.push(td);\r\n        continue;\r\n      }\r\n\r\n      if (columns[i].filtering) {\r\n        td = <td key={i}>\r\n          <input placeholder='filter...' value={this.state.inputValue}\r\n            onChange={(event) => this.updateInput(event.target.value, i)}>\r\n          </input>\r\n        </td>;\r\n        head.push(td);\r\n        continue;\r\n      }\r\n      td = <td key={i}></td>;\r\n      head.push(td);\r\n    }\r\n\r\n    for (let i = 0; i < rowsToRender.length; i++) {\r\n      let tds = [];\r\n      for (let j = 0; j <  rowsToRender[i].length; j++) {\r\n        let td = <td key={j} style={rowsToRender[i][j].style}>{ rowsToRender[i][j].value}</td>;\r\n        tds.push(td);\r\n      }\r\n      rows.push(<tr key={i}>{tds}</tr>);\r\n     }\r\n \r\n    return (\r\n      <table style={{borderCollapse: 'collapse'}}>\r\n        <thead>\r\n          <tr>{head}</tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </table>\r\n    )\r\n  }\r\n}\r\n","export const data = {\r\n  columns: [{ \r\n    type: 'number',\r\n    filtering: false,\r\n    sorting: true, \r\n    style: {\r\n      color: 'green',\r\n      width: '100px',\r\n      textAlign: 'center',\r\n    },\r\n  },\r\n  { \r\n    type: 'string',\r\n    filtering: true,\r\n    sorting: false, \r\n    style: {\r\n      color: 'red',\r\n      width: '100px',\r\n      padding: '10px',\r\n    },\r\n  },\r\n  { \r\n    type: 'string',\r\n    filtering: false,\r\n    sorting: false, \r\n    style: {\r\n      color: 'blue',\r\n      width: '100px',\r\n      padding: '10px',\r\n    },\r\n  },\r\n],\r\n  cells: [\r\n    {\r\n      value: 1,\r\n      style: {backgroundColor: 'lightgrey'}, \r\n    },\r\n    {\r\n      value: 'a',\r\n      style: {\r\n        borderLeft: '1px solid grey',\r\n        borderRight: '1px solid grey',\r\n        backgroundColor: 'lightgrey'\r\n      } \r\n    },\r\n    {\r\n      value: 's',\r\n      style: {backgroundColor: 'lightgrey'},  \r\n    },\r\n    {\r\n      value: 2,\r\n      style: {backgroundColor: 'lightblue'},  \r\n    },\r\n    {\r\n      value: 'atz',\r\n      style: {\r\n        backgroundColor: 'lightblue',\r\n        borderLeft: '1px solid grey',\r\n        borderRight: '1px solid grey'\r\n      }  \r\n    },  \r\n    {\r\n      value: 'x',\r\n      style: {backgroundColor: 'lightblue'},   \r\n    },  \r\n    {\r\n      value: 3,\r\n      style: {backgroundColor: 'lightpink'},   \r\n    },\r\n    {\r\n      value: 'atd',\r\n      style: {\r\n        borderLeft: '1px solid grey',\r\n        borderRight: '1px solid grey',\r\n        backgroundColor: 'lightpink'\r\n      }  \r\n    },\r\n    {\r\n      value: 'b',\r\n      style: {backgroundColor: 'lightpink'},  \r\n    }\r\n  ]\r\n}\r\n","import React from 'react';\nimport Table from './components/Table';\nimport { data } from './data/data.js';\n\nfunction App() {\n  return (\n    <Table data={data}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}